{
  "name": "permalinks",
  "description": "Permalinks plugin for Assemble, the static site generator for Grunt.js, Yeoman and Node.js. This plugin enables powerful and configurable URI patterns, [Moment.js](http://momentjs.com/) for parsing dates, much more.",
  "version": "0.1.9",
  "homepage": "https://github.com/assemble/assemble-contrib-permalinks",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/assemble/assemble-contrib-permalinks.git"
  },
  "bugs": {
    "url": "https://github.com/assemble/assemble-contrib-permalinks/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/assemble-contrib-permalinks/blob/master/LICENSE-MIT"
    }
  ],
  "main": "permalinks.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "frep": "~0.1.2",
    "moment": "~2.2.1"
  },
  "devDependencies": {
    "assemble": "~0.4.12",
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-readme": "~0.1.7",
    "handlebars-helper-eachitems": "~0.1.2",
    "handlebars-helper-paginate": "~0.1.3",
    "pretty": "~0.1.1"
  },
  "peerDependencies": {
    "assemble": "~0.4.12"
  },
  "keywords": [
    "assemble",
    "handlebars-helper-eachitems",
    "handlebars-helper-paginate",
    "assemblecollection",
    "assembleplugin",
    "blog",
    "moment",
    "moment.js",
    "parse url",
    "permalink",
    "permalinks",
    "post",
    "pretty links",
    "SEO",
    "slug",
    "static site generator",
    "uri",
    "url",
    "yaml front matter"
  ],
  "readme": "# permalinks [![NPM version](https://badge.fury.io/js/permalinks.png)](http://badge.fury.io/js/permalinks) \n\n> Permalinks plugin for Assemble, the static site generator for Grunt.js, Yeoman and Node.js. This plugin enables powerful and configurable URI patterns, [Moment.js](http://momentjs.com/) for parsing dates, much more.\n\n## Contributing\nWe welcome all kinds of contributions! The most basic way to show your support is to star the project, and if you'd like to get involed please see the [Contributing to permalinks](https://github.com/assemble/permalinks/blob/master/CONTRIBUTING.md) guide for information on contributing to this project.\n\n## Quickstart\n\nFrom the same directory as your project's [Gruntfile][Getting Started] and [package.json][], install this plugin with the following command:\n\n```bash\nnpm install permalinks --save-dev\n```\n\nOnce that's done, just add `permalinks`, the name of this module, to the `plugins` option in the Assemble task:\n\n```js\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    assemble: {\n      options: {\n        plugins: ['permalinks'],\n        permalinks: {\n          structure: ':year/:month/:day/foo:/index.html'\n        }\n      },\n      ...\n    }\n  });\n  grunt.loadNpmTasks('assemble');\n  grunt.registerTask('default', ['assemble']);\n};\n```\n\nIf everything was installed and configured correctly, you should be ready to go!\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n[package.json]: https://npmjs.org/doc/json.html\n\n\n## Patterns\n### Permalink structure\n\n> Replacement patterns for dynamically constructing permalinks, as well as the corresponding directory structures.\n\nPermalinks are **appended to the dest directory**. So given this config:\n\n```js\nassemble: {\n  blog: {\n    options: {\n      permalinks: {\n        structure: ':year/:month/:day/:basename:ext'\n      }\n    },\n    files: {\n      'blog/archives/': ['archives/*.hbs']\n    }\n  }\n}\n// the generated directory structure and resulting path would look something like:\n//=> 'blog/archives/2011/01/01/an-inspiring-post.html'\n```\n\n### How replacement patterns work\n\nThis plugin comes with a number of built-in replacement patterns that will automatically parse and convert the built-in variables into the appropriate string. Since Assemble provides a number of generic variables for accessing page data, such as `basename`, `ext`, `filename` etc., this plugin simply dynamically builds the replacement patterns from those generic variables.\n\nBarring a few exceptions (`_page`, `data`, `filePair`, `page`, `pageName`), you should be able to use any _applicable_ variable that is on the page context in your replacement patterns.\n\nFor example, assuming we have a file, `./templates/overview.hbs`:\n\n* `:ext`: would result in the `dest` extension: `.html`\n* `:extname`: alias for `:ext`.\n* `:basename`: would result in `overview`\n* `:filename`: would result in the dest file name, `overview.html`\n* `:pagename`: alias for `:filename`.\n* `:category`: Slugified version of _the very first category_ for a page.\n\n\n#### Custom replacement patterns\n\nIf you have some patterns you'd like to implement, if you think they're common enough that they should be built into this plugin, please submit a pull request.\n\nAdding patterns is easy, just add a `patterns: []` property to the `permalinks` option, then add any number of patterns to the array. For example, let's say we want to add the `:project` variable to our permalinks:\n\n```js\noptions: {\n  permalinks: {\n    structure: ':year/:month/:day/:project/:slug:ext',\n    patterns: []\n  }\n}\n...\n```\n\nSince `:project` is not a built-in variable, we need to add a replacement pattern so that any permalinks that include this variable will actually work:\n\n```js\noptions: {\n  permalinks: {\n    structure: ':year/:month/:day/:project/:slug:ext',\n    patterns: [\n      {\n        pattern: ':project',\n        replacement: '<%= pkg.name %>'\n      }\n    ]\n  }\n}\n...\n```\n#### with custom properties\n\nAny string pattern is acceptable, as long as a `:` precedes the variable, but don't forget that there must also be a matching property in the context or Assemble will might an error (or worse, not). In other words, when you add a replacement pattern for `:foo`, it's good practice to make sure this property exists:\n\n```yaml\n---\nfoo: bar\nslug:\n---\n```\n\n### [Moment.js](http://momentjs.com/) date patterns\n\n> This plugin uses the incredibly feature rich and flexible [moment.js](http://momentjs.com/) for parsing dates. If you have a feature request, please don't hesitate to create an issue or make a pull request.\n\nFor the date variables to work, a `date` property must exist on the page object.\n\n```yaml\n---\ndate: 2014-01-29 3:45 PM\n---\n```\n\nOr\n\n```js\npages: [\n  {\n    data: {\n      title: 'All about permalinks, the novel.',\n      description: 'This rivoting sequel to War & Peace will have you sleeping in no time.'\n      date: '2014-01-29 3:45 PM'\n    },\n    content: \"\"\n  }\n]\n```\n\n#### Common date patterns\n\n* `:year`: The year of the date, four digits, for example `2014`\n* `:month`: Month of the year, for example `01`\n* `:day`: Day of the month, for example `13`\n* `:hour`: Hour of the day, for example `24`\n* `:minute`: Minute of the hour, for example `01`\n* `:second`: Second of the minute, for example `59`\n\nFor the following examples, let's assume we have a date in the YAML front matter of a page formatted like this:\n\n```yaml\n---\ndate: 2014-01-29 3:45 PM\n---\n```\n(_note that this property doesn't have to be in YAML front matter, it just needs to be in the `page.data` object, so this works fine with `options.pages` collections as well._)\n\n#### Full date\n* `:date`:       Eqivelant to the full date: `YYYY-MM-DD`. Example: `2014-01-29`\n\n#### Year\n* `:YYYY`:      The full year of the date. Example: `2014`\n* `:YY`:        The two-digit year of the date. Example: `14`\n* `:year`:      alias for `YYYY`\n\n#### Month name\n* `:MMMM`:      The full name of the month. Example `January`.\n* `:MMM`:       The name of the month. Example: `Jan`\n* `:monthname`: alias for `MMMM`\n\n#### Month number\n* `:MM`:        The double-digit number of the month. Example: `01`\n* `:M`:         The single-digit number of the month. Example: `1`\n* `:month`:     alias for `MM`\n* `:mo`:        alias for `M`\n\n#### Day of the month\n* `:day`:       alias for `DD`\n* `:DD`:        The double-digit day of the month. Example: `29`\n* `:D`:         The double-digit day of the month. Example: `29`\n\n#### Day of the week\n* `:dddd`:      Day of the week. Example: `monday`\n* `:ddd`:       Day of the week. Example: `mon`\n* `:dd`:        Day of the week. Example: `Mo`\n* `:d`:         Day of the week. Example: `2`\n\n#### Hour\n* `:HH`:        The double-digit time of day on a 24 hour clock. Example `15`\n* `:H`:         The single-digit time of day on a 24 hour clock. Example `3`\n* `:hh`:        The double-digit time of day on a 12 hour clock. Example `03`\n* `:h`:         The single-digit time of day on a 12 hour clock. Example `3`\n* `:hour`:      alias for `HH`\n\n#### Minute\n* `:mm`:        Minutes. Example: `45`.\n* `:m`:         Minutes. Example: `45`.\n* `:min`:       Alias for `mm`|`m`.\n* `:minute`:    Alias for `mm`|`m`.\n\n#### Second\n* `:ss`:        Seconds. Example: `09`.\n* `:s`:         Seconds. Example: `9`.\n* `:sec`:       Alias for `ss`|`s`.\n* `:second`:    Alias for `ss`|`s`.\n\n\n\n## Options\n_Note that this plugin does not currently modify actual links inside pages, so that will need to be addressed separately. I'm also willing to look at options for incorporating that into this plugin._\n\n### structure\nType: `String`\nDefault: `undefined`\n\nThe permalink pattern to use for building paths and generated files. Permalink structures are appended to the `dest` defined for the current target.\n\nFor example, let's say we use the following pattern on a few blog posts: `foo.hbs`,  `bar.hbs`, and `baz.hbs`:\n\n```js\noptions: {\n  permalinks: {\n    structure: ':year/:month/:day/:basename:ext',\n  },\n  files: {\n    './blog/': ['./templates/blog/*.hbs']\n  }\n}\n// results in\n// => './blog/2014/01/01/foo.html'\n// => './blog/2014/01/01/bar.html'\n// => './blog/2014/01/01/baz.html'\n```\n\n#### 'index' pages\n\nNote that permalink structures will be ignored for files with the basename `index`. See [Issue #20](https://github.com/assemble/permalinks/issues/20) for more info.\n\n\n### preset\nType: `String`\nDefault: `undefined`\n\nThe following presets are currently available:\n\n* `pretty`: expands to `:basename/index:html`.\n* `dayname`: expands to `:YYYY/:MM/:DD/:basename/index:ext`.\n* `monthname`: expands to `:YYYY/:MM/:basename/index:ext`.\n\n#### how presets work\n\nIn a nutshell, a preset is simply a pre-defined permalink `structure`, so instead of having to type out `:foo/:bar/:baz/basename:html`, you can just use `pretty`. Presets expand into permalink structures following this pattern:\n\n```js\ndest + preset\n//=> dest + :bar/index:html\n```\n\nAdditionally, if a `structure` is also defined, the `preset` will be appended to it.\n\n```js\ndest + structure + preset\n//=> dest + :foo + :bar/index:html\n```\n\n_If you would like to see another preset, [please submit an issue](https://github.com/assemble/permalinks/issues/new)._\n\n\n### dateFormats\nType: `Array`\nDefault: `[\"YYYY-MM-DD\"]`\n\nArray of custom date formats for [Moment.js](http://momentjs.com/) to use for parsing dates.\n\n```js\noptions: {\n  permalinks: {\n    dateFormats: [\"YYYY-MM-DD\", \"MM-DD-YYYY\", \"YYYY-MM-DDTHH:mm:ss.SSS\"]\n  },\n  files: {\n    ...\n  }\n}\n```\n\n\n### lang\nType: `String`\nDefault: `en`\n\nSet the \"global\" language for [Moment.js](http://momentjs.com/) to use for converting dates:\n\n```js\noptions: {\n  permalinks: {\n    structure: ':year/:month/:day/:basename:ext',\n    lang: 'fr'\n  }\n  files: {\n    'blog/': ['templates/blog/*.hbs']\n  }\n}\n...\n//=> blog/2013/mars/13/my-post.html\n```\n\n\n### exclusions\nType: `Array`\nDefault: `['_page', 'data', 'filePair', 'page', 'pageName']`\n\nProperties to omit from the context for processing replacement patterns. I wanted to use this for omitting the default properties, but I decided to expose this as an option in case it comes in useful to someone else.\n\n```js\noptions: {\n  permalinks: {\n    exclusions: [\"foo\", \"bar\"],\n  },\n  files: {\n    ...\n  }\n}\n```\n\n\n\n## Usage Examples\n### Pretty URLs\n\nPretty links involve saving an `index.html` to each directory, with the tile, file name, slug, or some other variable as the `:basename` of the directory. For example:\n\n```js\nassemble: {\n  blog: {\n    options: {\n      permalinks: {\n        structure: ':basename/:index.html'\n      }\n    },\n    files: [\n      {expand: true, cwd: 'templates/', src: ['*.hbs'], dest: 'blog/', ext: '.html'}\n    ]\n  }\n}\n```\n\nwhich results in something like:\n\n```\ndest + /my-node-js-post/index.html\ndest + /my-javascript-post/index.html\ndest + /my-assemble-post/index.html\n```\n\n\n### Using presets\n\nPresets allow you to achieve certain permalinks structures without having to explicitly define each URL segment. For example, in the previous example we created pretty URLs., Here is how we would do the same with `presets`:\n\n```js\noptions: {\n  permalinks: {\n    preset: 'pretty'\n  },\n  files: {\n    './blog/': ['./templates/blog/*.hbs']\n  }\n}\n```\n\nThe above example won't necessarily save a whole lot of time, but it's a nice way of ensuring that you're getting pretty links with whatever permalinks structure you define. To some, this might be particularly useful when \"stacked\" with more complex permalink structures, e.g.:\n\n```js\noptions: {\n  permalinks: {\n    preset: 'pretty',\n    structure: ':archives/:categories',\n  },\n  files: {\n    './blog/': ['./templates/blog/*.hbs']\n  }\n}\n```\n\nwhich expands to: `./blog/:archives/:categories/:basename:/index:ext`, and would result in:\n\n```js\n./blog/archives/categories/foo/index.html\n```\n\n### Dest extension\n\nIn most cases your generated HTML will have the `.html` extension, then using `:index.html` is probably fine. But if you happen to switch back and forthing between projects that alternate between `.htm` and `.html`, you can use `:index:ext` instead.\n\n\n### Path separators\n\nYou don't have to use slashes (`/`) only in your permalinks, you can use `-` or `_` wherever you need them as well. For example, this is perfectly valid:\n\n```\n:YYYY_:MM-:DD/:slug:category:foo/:bar/index.html\n```\n\n**Warning**, this should be obvious, but make sure not to use a `.` in the middle of your paths, especially if you use Windows.\n\n### Dynamically build slugs\n\nYou can even dynamically build up strings using Lo-Dash templates:\n\n```yaml\n---\ndate: 1-1-2014\n\n## Dynamically build the slug for example\narea: business\nsection: finance\nslug: <%= area %>-<%= section %>\n---\n```\nWith this config:\n\n```js\nblog: {\n  options: {\n    permalinks: {\n      structure: ':year/:month/:day/:slug/:title.html'\n    }\n  },\n  files: {\n    'blog/': ['posts/*.hbs']\n  }\n}\n```\n\nWould render to:\n\n```\nblog/2014/01/01/business-finance/index.html\n```\n\n### More examples\n\nKeep in mind that the date is formatted the way you want it, you don't need to follow these examples. Also, some of these variables will only work if you add that property to your pages, and setup the replacement patterns.\n\n```js\n:YYYY/:MM/:DD/news/:id/index:ext\n//=> dest + '/2014/01/01/news/001/index.html'\n\n:YYYY/:MM/:DD/:mm/:ss/news/:id/index:ext\n//=> dest + '/2014/01/01/40/16/news/001/index.html'\n\n:year/:month/:day/:basename:ext\n//=> dest + '/2014/01/01/my-post.html'\n\nblog/:year-:month-:day/:basename:ext\n//=> dest + 'blog/2014-01-01/my-post.html'\n\n:date/:basename:ext\n//=> dest + '2014-01-01/my-post.html'\n\n:year/:month/:day/:category/index.html\n//=> dest + '/2014/01/01/javascript/index.html'\n\n:year/:month/:day/:slug/index.html\n//=> dest + '/2014/01/01/business-finance/index.html'\n```\n\n\n\n\n## SEO\n### Recommendations\nPermalinks are important for SEO. but you should spend some time thinking about the strategy you want to use before you decide on a URL structure.\n\n\n#### Avoid date-based permalinks\nYep, that's what I said. There are plenty of valid use cases for using date-based URL's. This plugin offers a number of date-based patterns, and we leverage [Moment.js][moment] a lot. Still,  I recommend that you avoid using a date-based permalink structure for your blog or documentation, because there is a good chance it will do more harm than good over the long term.\n\nDate-based URL's tend to _decrease click through rates_ on older articles. Think about it, who prefers reading out of date content? So use a URL strategy that doesn't go out of its way to emphasize the date, and you'l keep your posts feeling like fresh content.\n\n\n#### Numeric permalinks\nNumeric or `:id` based permalinks are better than date-based, but they don't really offer much usability or SEO benefit.\n\n\n#### Idiomatic permalinks\nThe best structure is one that:\n\n* provides the _highest degree of semantic relevance_ to the content, and\n* is _useful to both search engines and humans_\n\nHere are some example permalink structures, pick the one you like or feel free to use something else:\n\n```js\n:author\n:category/:author\n```\n\nSince the `:author` variable isn't actually built in, you'll need to add it as a custom replacement pattern. But you could use `:filename`, `:pagename`, `:basename` and so on. The important thing to remember is that _the name counts_.\n\nIf you need to use a custom variable, such as `:author` or `:title`, just add it like this:\n\n```js\nvar _ = grunt.util._;\n\nassemble: {\n  options: {\n    permalinks: {\n      structure: ':author:ext',\n      replacements: [\n        {\n          structure: ':author',\n          replacement: '<%= _.slugify(pkg.author.name) %>'\n        }\n      ]\n    }\n  },\n  files: {},\n...\n```\n\n[moment]: http://momentjs.com/ \"Moment.js Permalinks\"\n\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github.com/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter.com/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## Release History\n\n * 2013-10-09   v0.1.5   Adds logic to ignore permalink structures for files named \"index\". Fixes [issue 20](https://github.com/assemble/permalinks/issues/20). Updates replacement patterns to use RegExp and word boundaries to minimize potential for moment.js to greedily modify non-date patterns.\n * 2013-10-04   v0.1.2   Adds \"presets\" per [issue 6](https://github.com/assemble/permalinks/issues/6).\n * 2013-10-03   v0.1.1   Renames \"pattern\" to \"structure\".\n * 2013-10-03   v0.1.0   First commmit.\n\n## License\nCopyright (c) 2013 Jon Schlinkert, contributors.\nReleased under the MIT license\n\n***\n\n_This file was generated on Sunday, November 10, 2013._\n\n\n[moment]: http://momentjs.com/ \"Moment.js Permalinks\"",
  "readmeFilename": "README.md",
  "_id": "permalinks@0.1.9",
  "dist": {
    "shasum": "4c5c544f4d9aa9f0dc5efb740cb0b17f428267af"
  },
  "_from": "permalinks@",
  "_resolved": "https://registry.npmjs.org/permalinks/-/permalinks-0.1.9.tgz"
}
